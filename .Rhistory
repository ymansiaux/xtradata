devtools::check()
devtools::build(vignettes = TRUE)
devtools::install()
?xtradata_requete_features
?xtradata_requete_aggregate
devtools::check()
devtools::build(vignettes = TRUE)
devtools::install()
library(xtradata)
?xtradata_requete_features
devtools::docuas.package()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build(vignettes = TRUE)
devtools::install()
library(xtradata)
library(xtradata)
?xtradata_requete_features
driver <- "Cloudera ODBC Driver for Impala"
host <- "vl-i-0784.int.bordeaux-it.fr"
database <- "energy"
port <- 21050
UID  <- "datalab"
PWD <- "datalab"
db_connexion <-  DBI::dbConnect(odbc::odbc(),
driver = driver,
host = host,
port = port,
UID = UID,
PWD = PWD)
xtradata_requete_features <- function(key = NULL,
typename = NULL,
crs = "epsg:4326",
filter = NULL,
attributes = NULL,
maxfeatures = NULL,
backintime = NULL,
showURL = FALSE) {
assert_that(!is.null(typename))
assert_that(!is.null(key))
assert_that(crs %in% c("epsg:4326", "epsg:3945", "epsg:2154", "epsg:3857"),
msg = 'Les valeurs de crs autorisees sont "epsg:4326", "epsg:3945", "epsg:2154", "epsg:3857"'
)
check_internet()
base_url_xtradata_features <- glue("http://data.bordeaux-metropole.fr/geojson/features/{typename}?")
if (is.string(filter)) filter <- fromJSON(filter)
if (is.string(attributes)) attributes <- fromJSON(attributes)
parametres_requete <- list(
"key" = key, "crs" = crs,
"filter" = filter, "attributes" = attributes,
"maxfeatures" = maxfeatures, "backintime" = backintime
) %>% compact()
params_encodes_pour_url <- map2(parametres_requete, names(parametres_requete), function(param, param_name) {
if (vec_depth(param) == 1 & length(param) == 1) {
# on doit transformer les listes et les vecteurs, si ce n'est pas le cas pas besoin de passer en JSON
parametre_encode <- param
} else {
parametre_encode <- toJSON(param, auto_unbox = TRUE) %>% URLencode()
}
glue("&{param_name}={parametre_encode}")
})
params_encodes_pour_url <- glue_collapse(params_encodes_pour_url, sep = "", width = Inf, last = "")
url <- glue("{base_url_xtradata_features}{params_encodes_pour_url}")
if (showURL) print(url)
request <- GET(url)
check_API_results(request)
response <- content(request, as = "text", encoding = "UTF-8")
return(fromJSON(response, flatten = TRUE)$features)
}
pkgload::load_all()
a <- xtradata_requete_features(key = "DATAZBOUBB",
typename = "PC_CAPTV_P",
crs = "epsg:4326",
filter = '{"type":"BOUCLE"}',
attributes = NULL,
maxfeatures = 15,
backintime = "2021-02-01",
showURL = TRUE)
a
devtools::check()
devtools::build(vignettes = TRUE)
devtools::install()
