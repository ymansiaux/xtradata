#'   attributes = attributes_key_value_JSON,
#'   filter = filter
#' )
#'
#'
#' res7
#' res8
#'
#' all.equal(res7, res8)
#'
#' #' # les filtres sur un meme champ doivent etre combines avec les operateurs
#' # '$and', '$or', '$not'
#'
#' filterJSON_combined <- '{
#' "$and": [
#'  { "gid": {"$gte": "1"} },
#'  { "gid": {"$lte": "5"} }
#' ]
#' }'
#'
#' filter_combined <- list("$and" = list(
#'   list("gid" = list(
#'     "$gte" = "1"
#'   )),
#'
#'   list("gid" = list(
#'     "$lte" = "5"
#'   ))
#' ))
#'
#' res9 <- xtradata_requete_features(
#'   typename = "ST_PARK_P", key = MaCle,
#'   filter = filterJSON_combined,
#' )
#'
#' res10 <- xtradata_requete_features(
#'   typename = "ST_PARK_P", key = MaCle,
#'   filter = filter_combined
#' )
#'
#' all.equal(res9, res10)
#'
#'
#' # possibilite de fournir un tableau de donnees dans l'argument filter
#'
#' filter_and <- list(
#'   "gid" = list("$in" = c(247, 593))
#' )
#'
#'
#' filter_and_JSON <- '{
#' "gid": {
#'  "$in": [
#'    247,593
#'  ]
#' }}'
#'
#' res11 <- xtradata_requete_aggregate(
#'   key = MaCle,
#'   typename = "ST_PARK_P",
#'   rangeStart = "2021-02-20", rangeEnd = "2021-02-21",
#'   rangeStep = "hour",
#'   attributes = list("gid", "libres", "total", "etat"),
#'   filter = filter_and
#' )
#'
#' res12 <- xtradata_requete_aggregate(
#'   key = MaCle,
#'   typename = "ST_PARK_P",
#'   rangeStart = "2021-02-20", rangeEnd = "2021-02-21",
#'   rangeStep = "hour",
#'   attributes = list("gid", "libres", "total", "etat"),
#'   filter = filter_and_JSON
#' )
#'
#' all.equal(res11, res12)
#' }
#'
xtradata_requete_aggregate <- function(key = NULL,
typename = NULL,
rangeStart = NULL,
rangeEnd = NULL,
rangeStep = NULL,
rangeFilter = list(
"hours" = 0:23,
"days" = 1:7,
"publicHolidays" = FALSE
),
attributes = NULL,
filter = NULL,
showURL = FALSE) {
assert_that(!is.null(typename))
assert_that(!is.null(key))
assert_that(!is.null(rangeStart))
check_internet()
base_url_xtradata_aggregate <- glue("http://data.bordeaux-metropole.fr/geojson/aggregate/{typename}?")
if (is.string(filter)) filter <- fromJSON(filter)
if (is.string(rangeFilter)) rangeFilter <- fromJSON(rangeFilter)
if (is.string(attributes)) attributes <- fromJSON(attributes)
parametres_requete <- list(
"filter" = filter,
"key" = key, "rangeStart" = rangeStart, "rangeEnd" = rangeEnd,
"rangeStep" = rangeStep, "rangeFilter" = rangeFilter,
"attributes" = attributes
) %>% compact()
# browser()
params_encodes_pour_url <- map2(parametres_requete, names(parametres_requete), function(param, param_name) {
if (vec_depth(param) == 1 & length(param) == 1) {
print("if")
# on gere ici les elements à un niveau clé <-> valeur : ex key = MaCle ou rangeStart = une date quelconque
parametre_encode <- param
} else {
# cette partie va gérer les tableaux. 1er if : tableau de lg 1, 2eme if : tableau de lg >1
if (length(unlist(param)) == 1) {
# ici element plus complexes, ex les listes avec des sous niveau : les filters ou les rangeStep
# ex
print("else if")
parametre_encode <- toJSON(param, auto_unbox = TRUE) %>% URLencode()
} else {
print("else else")
parametre_encode <- toJSON(param, auto_unbox = TRUE) %>% URLencode()
}
}
glue("&{param_name}={parametre_encode}")
})
params_encodes_pour_url <- glue_collapse(params_encodes_pour_url, sep = "", width = Inf, last = "")
# browser()
url <- glue("{base_url_xtradata_aggregate}{params_encodes_pour_url}")
if (showURL) print(url)
request <- suppressWarnings(GET(url))
check_API_results(request)
response <- content(request, as = "text", encoding = "UTF-8")
df <- fromJSON(response, flatten = TRUE)$features
if (length(df) > 0) {
colnames(df) <- map_chr(colnames(df), ~ gsub(x = ., pattern = "properties.", replacement = ""))
}
return(as.data.frame(df))
}
attributes_key_value_JSON <- '{"comptage_5m" : "sum"}'
filter <- '{"ident": "Z25CT8"}'
filterJSON <- '{
"ident": "\"Z25CT8\""
}'
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = Sys.Date(), rangeEnd = Sys.time(),
showURL = TRUE)
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = Sys.Date(),
showURL = TRUE)
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = Sys.Date(),
showURL = TRUE, filter = filter)
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = Sys.Date(),
showURL = TRUE, filter = filterJSON)
filterJSON <- '{
"ident": "Z25CT8\"
}'
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = Sys.Date(),
showURL = TRUE, filter = filterJSON)
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = Sys.Date(),
showURL = TRUE, filter = filterJSON, attributes = attributes_key_value_JSON)
a
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = Sys.Date(),
showURL = TRUE, filter = filterJSON)#, attributes = attributes_key_value_JSON)
a
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = "2021-04-01",
showURL = TRUE, filter = filterJSON)#, attributes = attributes_key_value_JSON)
a
filter <- '{"ident": "Z203CT7"}'
filterJSON <- '{
"ident": "Z203CT7\"
}'
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = "2021-04-01", ran
showURL = TRUE, filter = filterJSON)#, attributes = attributes_key_value_JSON)
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = "2021-04-01",
showURL = TRUE, filter = filterJSON)#, attributes = attributes_key_value_JSON)
a
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = "2021-04-01",
showURL = TRUE, filter = filter)#, attributes = attributes_key_value_JSON)
a
a <- xtradata_requete_aggregate(key = "DATAZBOUBB", typename = "PC_CAPTV_P", rangeStart = "2021-04-01",
showURL = TRUE, filter = filter, attributes = attributes_key_value_JSON)
a
pkgload::load_all()
#
devtools::check()
MaCle <- "DATAZBOUBB"
filter <- list(
"ident" = "CUBPK88",
"etat" = "LIBRE",
"libres" = list(
"$gt" = 100
)
)
filterJSON <- '{
"ident": "CUBPK88",
"etat" : "LIBRE",
"libres": {
"$gt": 100
}
}'
res1 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
filter = filter
)
res1 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
filter = filter
)
res2 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
filter = filterJSON
)
expect_gt(nrow(res1), 0)
expect_gt(nrow(res2), 0)
expect_equal(dim(res1), dim(res2))
expect_true(all.equal(res1, res2))
res1
res2
MaCle <- "DATAZBOUBB"
filter <- list(
"ident" = "CUBPK88",
"etat" = "LIBRE",
"libres" = list(
"$gt" = 100
)
)
filterJSON <- '{
"ident": "CUBPK88",
"etat" : "LIBRE",
"libres": {
"$gt": 100
}
}'
res1 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
filter = filter
)
res2 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
filter = filterJSON
)
expect_gt(nrow(res1), 0)
expect_gt(nrow(res2), 0)
expect_equal(dim(res1), dim(res2))
expect_true(all.equal(res1, res2))
res1
res2
MaCle <- "DATAZBOUBB"
filter <- list(
"ident" = "CUBPK88",
"etat" = "LIBRE",
"libres" = list(
"$gt" = 100
)
)
rangeFilter <- list(
"hours" = 5:6,
"days" = 1:7,
"publicHolidays" = FALSE
)
rangeFilterJSON <- '{
"hours": [
5,6
],
"days": [
1,2,3,4,5,6,7
],
"publicHolidays": false
}'
res1 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
rangeFilter = rangeFilter,
attributes = list("gid", "libres", "total", "etat", "ident"),
filter = filter
)
res2 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
rangeFilter = rangeFilterJSON,
attributes = list("gid", "libres", "total", "etat", "ident"),
filter = filter
)
expect_gt(nrow(res1), 0)
expect_gt(nrow(res2), 0)
expect_equal(dim(res1), dim(res2))
expect_true(all.equal(res1, res2))
res1
res2
MaCle <- "DATAZBOUBB"
filter <- list(
"ident" = "CUBPK88",
"etat" = "LIBRE",
"libres" = list(
"$gt" = 100
)
)
rangeFilter <- list(
"hours" = 5:6,
"days" = 1:7,
"publicHolidays" = FALSE
)
attributes <- list("gid", "libres")
attributesArray <- '["gid", "libres"]'
res1 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
rangeFilter = rangeFilter,
attributes = attributes,
filter = filter
)
res2 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
rangeFilter = rangeFilter,
attributes = attributesArray,
filter = filter
)
expect_gt(nrow(res1), 0)
expect_gt(nrow(res2), 0)
expect_equal(dim(res1), dim(res2))
expect_true(all.equal(res1, res2))
res1
res2
MaCle <- "DATAZBOUBB"
filter <- list(
"ident" = "CUBPK88",
"etat" = "LIBRE",
"libres" = list(
"$gt" = 100
)
)
rangeFilter <- list(
"hours" = 5:6,
"days" = 1:7,
"publicHolidays" = FALSE
)
attributes_key_value_list <- list("gid" = "first", "libres" = "max")
attributes_key_value_JSON <- '{"gid" : "first", "libres" : "max"}'
res1 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
rangeFilter = rangeFilter,
attributes = attributes_key_value_list,
filter = filter
)
res2 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
rangeStep = "hour",
rangeFilter = rangeFilter,
attributes = attributes_key_value_JSON,
filter = filter
)
expect_gt(nrow(res1), 0)
expect_gt(nrow(res2), 0)
expect_equal(dim(res1), dim(res2))
expect_true(all.equal(res1, res2))
MaCle <- "DATAZBOUBB"
filterJSON_combined <- '{
"$and": [
{ "total": {"$gte": 500} },
{ "total": {"$lte": 1000} }
]
}'
filter_combined <- list("$and" = list(
list("total" = list(
"$gte" = 500
)),
list("total" = list(
"$lte" = 1000
))
))
res1 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
filter = filterJSON_combined
)
res2 <- xtradata_requete_aggregate(
typename = "ST_PARK_P", key = MaCle,
rangeStart = "2020-08-01",
rangeEnd = "2020-08-16",
filter = filter_combined
)
expect_gt(nrow(res1), 0)
expect_gt(nrow(res2), 0)
expect_equal(dim(res1), dim(res2))
expect_true(all.equal(res1, res2))
res1
res2
attributes_key_value_JSON <- '{"comptage_5m" : "sum"}'
filter <- '{"ident": "Z203CT7"}'
filterJSON <- '{
"ident": "Z203CT7\"
}'
res1 <- xtradata_requete_aggregate(
typename = "PC_CAPTV_P", key = MaCle,
rangeStart = "2021-03-05",
rangeEnd = "2021-03-06",
rangeStep = "hour",
filter = filter
)
res2 <- xtradata_requete_aggregate(
typename = "PC_CAPTV_P", key = MaCle,
rangeStart = "2021-03-05",
rangeEnd = "2021-03-06",
rangeStep = "hour",
filter = filterJSON,
attributes = attributes_key_value_JSON
)
expect_gt(nrow(res1), 0)
expect_gt(nrow(res2), 0)
expect_equal(dim(res1), dim(res2))
filterJSON
res1
res2
res1 <- xtradata_requete_aggregate(
typename = "PC_CAPTV_P", key = MaCle,
rangeStart = "2021-03-05",
rangeEnd = "2021-03-06",
rangeStep = "hour",
filter = filter,
attributes = attributes_key_value_JSON
)
res2 <- xtradata_requete_aggregate(
typename = "PC_CAPTV_P", key = MaCle,
rangeStart = "2021-03-05",
rangeEnd = "2021-03-06",
rangeStep = "hour",
filter = filterJSON,
attributes = attributes_key_value_JSON
)
expect_gt(nrow(res1), 0)
expect_gt(nrow(res2), 0)
expect_equal(dim(res1), dim(res2))
expect_true(all.equal(res1, res2))
res1
res2
MaCle <- "DATAZBOUBB"
filter <- '{"ident": "Z203CT7"}'
filterJSON <- '{
"ident": "Z203CT7\"
}'
filter <- '{"ident": "Z203CT7"}'
filterJSON <- '{
"ident": "Z203CT7\"
}'
res1 <- xtradata_requete_features(
typename = "PC_CAPTV_P", key = MaCle,
rangeStart = "2021-03-05",
rangeEnd = "2021-03-06",
rangeStep = "hour",
filter = filter
)
res1 <- xtradata_requete_features(
typename = "PC_CAPTV_P", key = MaCle,
rangeStep = "hour",
filter = filter
)
res1 <- xtradata_requete_features(
typename = "PC_CAPTV_P", key = MaCle,
filter = filter
)
pkgload::load_all()
MaCle <- "DATAZBOUBB"
filter <- '{"ident": "Z203CT7"}'
filterJSON <- '{
"ident": "Z203CT7\"
}'
res1 <- xtradata_requete_features(
typename = "PC_CAPTV_P", key = MaCle,
filter = filter
)
res2 <- xtradata_requete_aggregate(
typename = "PC_CAPTV_P", key = MaCle,
filter = filterJSON
)
res2 <- xtradata_requete_features(
typename = "PC_CAPTV_P", key = MaCle,
filter = filterJSON
)
res2
res1
#
devtools::check()
devtools::build(vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
